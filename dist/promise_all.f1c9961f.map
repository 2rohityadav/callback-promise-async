{"version":3,"sources":["src\\promise_all.js"],"names":["document","getElementById","innerHTML","apiRequest","url","Promise","resolve","reject","catch","err","p1","p2","p3","all","then","res","console","log","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,SAASC,cAAT,CAAwB,KAAxB,EAA+BC,SAA/B;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACvB,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C;AACA,QAAIH,GAAJ,EAAS;AACPE,cAAQF,GAAR;AACD,KAFD,MAEO;AACL;AACAG,aAAO,oBAAP;AACD;AACF,GARM,EAQJC,KARI,CAQE,UAASC,GAAT,EAAc;AACrB;AACA,WAAOA,GAAP;AACD,GAXM,CAAP,CADuB,CAYnB;AACJ;AACD;;AAED,IAAIC,KAAKP,WAAW,QAAX,CAAT;;AAEA;AACA,IAAIQ,KAAKR,YAAT;;AAEA,IAAIS,KAAKT,WAAW,UAAX,CAAT;;AAEAE,QAAQQ,GAAR,CAAY,CAACH,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAZ,EACGE,IADH,CACQ,UAASC,GAAT,EAAc;AAClBC,UAAQC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;AACD,CAHH,EAIGP,KAJH,CAIS,UAASC,GAAT,EAAc;AACnBO,UAAQE,KAAR,CAAc,KAAd,EAAqBT,GAArB;AACD,CANH;;AAQA","file":"promise_all.f1c9961f.map","sourceRoot":"..","sourcesContent":["document.getElementById(\"app\").innerHTML = `\r\n<h1>Promise.all([ðŸ˜±])</h1>\r\n<br />\r\n<div id=\"post\"></div>\r\n`;\r\n\r\n// const promise1 = Promise.resolve(\"Wow made promise!\");\r\n// const promise2 = 10;\r\n// const promise3 = new Promise((resolve, reject) => {\r\n//   setTimeout(resolve, 2000, \"GoodBye\");\r\n// });\r\n\r\n// Promise.all([promise1, promise2, promise3]).then(values => {\r\n//   console.log(values);\r\n// });\r\n\r\n// ? Added one more promise\r\n\r\n// const promise1 = Promise.resolve(\"Wow made promise!\");\r\n// const promise2 = 10;\r\n// const promise3 = new Promise((resolve, reject) => {\r\n//   setTimeout(() => {\r\n//     resolve ? resolve(\"promise resolved :-)\") : reject(\"promise rejected :-(\");\r\n//   }, 2000);\r\n// });\r\n\r\n// const promise4 = fetch(\"https://jsonplaceholder.typicode.com/users\").then(res =>\r\n//   res.json()\r\n// );\r\n\r\n// Promise.all([promise1, promise2, promise3, promise4]).then(values => {\r\n//   console.log(values);\r\n// });\r\n\r\n//  ? Another example - Handling Multiple JavaScript Promises Even if Some Fail\r\n\r\n// var p1 = new Promise(function(resolve, reject) {\r\n//   resolve(\"one\");\r\n// });\r\n\r\n// var p2 = new Promise(function(resolve, reject) {\r\n//   reject(\"p2 rejected\");\r\n// });\r\n\r\n// var p3 = new Promise(function(resolve, reject) {\r\n//   resolve(\"three\");\r\n// });\r\n\r\n// Promise.all([p1, p2, p3])\r\n//   .then(function(res) {\r\n//     console.log(\"Promise.all\", res);\r\n//   })\r\n//   .catch(function(err) {\r\n//     console.error(\"Promise.all error:- \", err);\r\n//   });\r\n\r\n// ? another example by fixing reslove Promises\r\n\r\nfunction apiRequest(url) {\r\n  return new Promise(function(resolve, reject) {\r\n    //our fake api simply returns the string passed as the 'url'\r\n    if (url) {\r\n      resolve(url);\r\n    } else {\r\n      //if no url is passed to the function, it will fail\r\n      reject(\"apiRequest failed!\");\r\n    }\r\n  }).catch(function(err) {\r\n    //return error;\r\n    return err;\r\n  }); //! if catched here then will return resolved promised with failed promises.\r\n  // ! otherwise it will reject and give an error for all.\r\n}\r\n\r\nvar p1 = apiRequest(\"urlOne\");\r\n\r\n//this one will fail\r\nvar p2 = apiRequest();\r\n\r\nvar p3 = apiRequest(\"urlThree\");\r\n\r\nPromise.all([p1, p2, p3])\r\n  .then(function(res) {\r\n    console.log(\"Promise.all\", res);\r\n  })\r\n  .catch(function(err) {\r\n    console.error(\"err\", err);\r\n  });\r\n\r\n//Promise.all [ 'urlOne', 'apiRequest failed!', 'urlThree' ]\r\n"]}